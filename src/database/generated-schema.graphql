# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregatePost {
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumuserRolesNullableFilter {
  equals: userRoles
  in: [userRoles!]
  not: NestedEnumuserRolesNullableFilter
  notIn: [userRoles!]
}

input EnumuserRolesNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumuserRolesNullableFilter
  _min: NestedEnumuserRolesNullableFilter
  equals: userRoles
  in: [userRoles!]
  not: NestedEnumuserRolesNullableWithAggregatesFilter
  notIn: [userRoles!]
}

type Mutation {
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumuserRolesNullableFilter {
  equals: userRoles
  in: [userRoles!]
  not: NestedEnumuserRolesNullableFilter
  notIn: [userRoles!]
}

input NestedEnumuserRolesNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumuserRolesNullableFilter
  _min: NestedEnumuserRolesNullableFilter
  equals: userRoles
  in: [userRoles!]
  not: NestedEnumuserRolesNullableWithAggregatesFilter
  notIn: [userRoles!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableEnumuserRolesFieldUpdateOperationsInput {
  set: userRoles
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Post {
  created_at: DateTime!
  id: String!
  title: String!
  updated_at: DateTime!
  user: User!
  userId: String!
}

type PostCountAggregate {
  _all: Int!
  created_at: Int!
  id: Int!
  title: Int!
  updated_at: Int!
  userId: Int!
}

input PostCountOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  title: SortOrder
  updated_at: SortOrder
  userId: SortOrder
}

input PostCreateInput {
  created_at: DateTime
  id: String
  title: String!
  updated_at: DateTime
  user: UserCreateNestedOneWithoutPostInput!
}

input PostCreateManyInput {
  created_at: DateTime
  id: String
  title: String!
  updated_at: DateTime
  userId: String!
}

input PostCreateManyUserInput {
  created_at: DateTime
  id: String
  title: String!
  updated_at: DateTime
}

input PostCreateManyUserInputEnvelope {
  data: [PostCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
}

input PostCreateOrConnectWithoutUserInput {
  create: PostCreateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutUserInput {
  created_at: DateTime
  id: String
  title: String!
  updated_at: DateTime
}

type PostGroupBy {
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  created_at: DateTime!
  id: String!
  title: String!
  updated_at: DateTime!
  userId: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregate {
  created_at: DateTime
  id: String
  title: String
  updated_at: DateTime
  userId: String
}

input PostMaxOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  title: SortOrder
  updated_at: SortOrder
  userId: SortOrder
}

type PostMinAggregate {
  created_at: DateTime
  id: String
  title: String
  updated_at: DateTime
  userId: String
}

input PostMinOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  title: SortOrder
  updated_at: SortOrder
  userId: SortOrder
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithAggregationInput {
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  created_at: SortOrder
  id: SortOrder
  title: SortOrder
  updated_at: SortOrder
  userId: SortOrder
}

input PostOrderByWithRelationInput {
  created_at: SortOrder
  id: SortOrder
  title: SortOrder
  updated_at: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum PostScalarFieldEnum {
  created_at
  id
  title
  updated_at
  userId
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  created_at: DateTimeFilter
  id: StringFilter
  title: StringFilter
  updated_at: DateTimeFilter
  userId: StringFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input PostUpdateInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostNestedInput
}

input PostUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutUserInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutUserNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  data: PostUpdateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutUserInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  create: PostCreateWithoutUserInput!
  update: PostUpdateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  created_at: DateTimeFilter
  id: StringFilter
  title: StringFilter
  updated_at: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstPostOrThrow(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getPost(where: PostWhereUniqueInput!): Post
  getUser(where: UserWhereUniqueInput!): User
  groupByPost(by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, orderBy: [PostOrderByWithAggregationInput!], skip: Int, take: Int, where: PostWhereInput): [PostGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  Post(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  _count: UserCount
  created_at: DateTime!
  email: String
  id: String!
  name: String!
  role: userRoles
  updated_at: DateTime!
}

type UserCount {
  Post(where: PostWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  created_at: Int!
  email: Int!
  id: Int!
  name: Int!
  role: Int!
  updated_at: Int!
}

input UserCountOrderByAggregateInput {
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updated_at: SortOrder
}

input UserCreateInput {
  Post: PostCreateNestedManyWithoutUserInput
  created_at: DateTime
  email: String
  id: String
  name: String!
  role: userRoles
  updated_at: DateTime
}

input UserCreateManyInput {
  created_at: DateTime
  email: String
  id: String
  name: String!
  role: userRoles
  updated_at: DateTime
}

input UserCreateNestedOneWithoutPostInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostInput
  create: UserCreateWithoutPostInput
}

input UserCreateOrConnectWithoutPostInput {
  create: UserCreateWithoutPostInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostInput {
  created_at: DateTime
  email: String
  id: String
  name: String!
  role: userRoles
  updated_at: DateTime
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  created_at: DateTime!
  email: String
  id: String!
  name: String!
  role: userRoles
  updated_at: DateTime!
}

type UserMaxAggregate {
  created_at: DateTime
  email: String
  id: String
  name: String
  role: userRoles
  updated_at: DateTime
}

input UserMaxOrderByAggregateInput {
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updated_at: SortOrder
}

type UserMinAggregate {
  created_at: DateTime
  email: String
  id: String
  name: String
  role: userRoles
  updated_at: DateTime
}

input UserMinOrderByAggregateInput {
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updated_at: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  created_at: SortOrder
  email: SortOrderInput
  id: SortOrder
  name: SortOrder
  role: SortOrderInput
  updated_at: SortOrder
}

input UserOrderByWithRelationInput {
  Post: PostOrderByRelationAggregateInput
  created_at: SortOrder
  email: SortOrderInput
  id: SortOrder
  name: SortOrder
  role: SortOrderInput
  updated_at: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  created_at
  email
  id
  name
  role
  updated_at
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  role: EnumuserRolesNullableWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
}

input UserUpdateInput {
  Post: PostUpdateManyWithoutUserNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  role: NullableEnumuserRolesFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  role: NullableEnumuserRolesFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutPostNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostInput
  create: UserCreateWithoutPostInput
  update: UserUpdateWithoutPostInput
  upsert: UserUpsertWithoutPostInput
}

input UserUpdateWithoutPostInput {
  created_at: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  role: NullableEnumuserRolesFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutPostInput {
  create: UserCreateWithoutPostInput!
  update: UserUpdateWithoutPostInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  Post: PostListRelationFilter
  created_at: DateTimeFilter
  email: StringNullableFilter
  id: StringFilter
  name: StringFilter
  role: EnumuserRolesNullableFilter
  updated_at: DateTimeFilter
}

input UserWhereUniqueInput {
  id: String
}

enum userRoles {
  ARCHITECT
  LEAD
  SENIOR
}